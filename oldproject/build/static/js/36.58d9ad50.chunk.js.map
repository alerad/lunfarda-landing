{"version":3,"sources":["../node_modules/@material-ui/core/esm/utils/capitalize.js","../node_modules/@material-ui/core/esm/styles/makeStyles.js","../node_modules/@material-ui/core/esm/Typography/Typography.js","components/buenos-aires/BANeighborhoods.tsx"],"names":["capitalize","string","Error","_formatMuiErrorMessage","charAt","toUpperCase","slice","makeStyles","stylesOrCreator","options","arguments","length","undefined","makeStylesWithoutDefault","_extends","defaultTheme","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","React","props","ref","_props$align","align","classes","className","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","_objectWithoutProperties","Component","clsx","root","concat","withStyles","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","displayBlock","name","useStyles","backgroundColor","content","marginTop","blackMask","zIndex","placeCardContainer","backgroundSize","backgroundRepeat","minHeight","BANeighborhoods","item","container","xs","justify","md","style","fontWeight","spacing","places","map","place","to","cursor","textDecoration","PlaceCard","image","background","alignItems"],"mappings":"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","file":"static/js/36.58d9ad50.chunk.js","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.\n//\n// A strict capitalization should uppercase the first letter of each word a the sentence.\n// We only handle the first word.\nexport default function capitalize(string) {\n  if (typeof string !== 'string') {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: capitalize(string) expects a string argument.\" : _formatMuiErrorMessage(7));\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import React from \"react\"\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n        root: {\r\n            backgroundColor: theme.palette.text.secondary\r\n        },\r\n        content: {\r\n            margin: '6rem 0',\r\n            textAlign:'center'\r\n        },\r\n        marginTop: {\r\n            marginTop: '2rem'\r\n        },\r\n        blackMask: {\r\n            zIndex: 0,\r\n            position: 'absolute',\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: 'rgb(0,0,0,0.5)'\r\n        },\r\n        placeCardContainer: {\r\n            backgroundSize: \"100% 100%!important\",\r\n            backgroundRepeat: 'no-repeat',\r\n            minHeight: '250px',\r\n            position:'relative'\r\n        }\r\n    }\r\n));\r\n\r\n\r\ninterface BANeighborhoodsProps {\r\n\r\n}\r\n\r\nexport const BANeighborhoods: React.FC<BANeighborhoodsProps> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item container xs={12} className={classes.root} justify={\"center\"}>\r\n            <Grid item container xs={10} md={8} justify={\"center\"} className={classes.content}>\r\n                <Grid item xs={10}>\r\n                    <Typography variant={\"h2\"} color={\"secondary\"} style={{fontWeight:500}}>\r\n                        Do you know BA Neighborhoods\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={10} md={6} className={classes.marginTop}>\r\n                    <Typography variant={\"subtitle1\"} color={\"secondary\"}>\r\n                        Take a loot at the different neighborhoods, its\r\n                        interesting attractions and beautiful landscapes\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item container xs={12} spacing={3} className={classes.marginTop}>\r\n                    {places.map(place => {\r\n                        return (\r\n                            <Grid item xs={12} md={4}>\r\n                                <Link to={\"/neighborhoods\"} style={{cursor:\"pointer\", textDecoration:\"none\"}}>\r\n                                    <PlaceCard name={place.name} image={place.image}/>\r\n                                </Link>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\ninterface PlaceCardProps {\r\n    name: string,\r\n    image: string\r\n}\r\n\r\nconst PlaceCard = (place: PlaceCardProps) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Grid item container xs={12} className={classes.placeCardContainer} style={{background: \"url('\"+place.image+\"')\"}} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={12} style={{zIndex:2}}>\r\n                <Typography variant={\"h2\"} color={\"secondary\"} style={{textAlign:\"center\", zIndex:2, fontWeight:700}}>\r\n                    {place.name}\r\n                </Typography>\r\n            </Grid>\r\n            <div className={classes.blackMask}/>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst places : PlaceCardProps[] = [\r\n    {\r\n        name: \"North\",\r\n        image: \"https://lun-us.icons8.com/api/assets/90e7eb44-23bb-4762-85f5-1973c5e92914/retiro.png\"\r\n    },\r\n    {\r\n        name: \"South\",\r\n        image: \"https://lun-us.icons8.com/api/assets/e2c94eb4-ef17-4435-bd69-cde5164c60c3/San Telmo.png\"\r\n    },\r\n    {\r\n        name: \"City Center\",\r\n        image: \"https://lun-us.icons8.com/api/assets/0bd71102-e8b1-4e92-ae09-d68039861091/plaza-de-mayo.png\"\r\n    }\r\n]\r\n\r\nexport default BANeighborhoods"],"sourceRoot":""}